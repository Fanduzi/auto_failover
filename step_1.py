# -*- coding: utf-8 -*-  
#coding=utf-8
import pymysql
import time

error_message=u"Error 'Unknown table 'fandb.t_error_maker'' on query. Default database: 'fandb'. Query: 'DROP TABLE `t_error_maker` /* generated by server */'"

#创建数据库连接函数
def get_conn(host,port,user,password,db='performance_schema',charset='utf8'):
    return pymysql.connect(host=host, port=int(port), user=user,password=password,db=db,charset=charset)


#制造复制异常函数
def error_maker(host,port,user,password,db,charset):
	conn=get_conn(host=host, port=int(port), user=user,password=password,db=db,charset=charset)
	cursor = conn.cursor()
	cursor.execute("set session sql_log_bin=0;")
	cursor.execute("create table t_error_maker(id int)")
	cursor.execute("set session sql_log_bin=1")
	cursor.execute("drop table t_error_maker")
	cursor.close()
	conn.close()



#获取slave status
def get_slave_statue(conn,sql):
    cursor = conn.cursor(pymysql.cursors.DictCursor)
    cursor.execute("show slave status;")
    result = cursor.fetchone()
    return result
    cursor.close()



#获取master status
def get_master_status(conn):
	cursor = conn.cursor(pymysql.cursors.DictCursor)
	cursor.execute("show master status;")
	result = cursor.fetchone()
	return result
	cursor.close()



def change_master(conn,change_string):
	cursor = conn.cursor()
	cursor.execute("stop slave;")
	cursor.execute(change_string)
	cursor.execute("start slave;")
	cursor.close()



def repair_slave(conn):
	cursor = conn.cursor()
	cursor.execute("set global sql_slave_skip_counter=1;")
	cursor.execute("start slave sql_thread;")
	cursor.close()	



if __name__ == '__main__':
	#连接3306 制造复制异常函数
	error_maker(host='172.16.65.36', port=3306, user='root',password='mysql',db='fandb',charset='utf8')
	conn39 = get_conn('10.0.1.39',3306,'root','mysql')
	conn40 = get_conn('10.0.1.40',3306,'root','mysql')
	conn41 = get_conn('10.0.1.41',3306,'root','mysql')
	while True:
		Last_SQL_Error_39 = get_slave_statue(conn39,'show slave status;')['Last_SQL_Error']
		Last_SQL_Error_40 = get_slave_statue(conn40,'show slave status;')['Last_SQL_Error']
		Last_SQL_Error_41 = get_slave_statue(conn41,'show slave status;')['Last_SQL_Error']
		if Last_SQL_Error_39 == Last_SQL_Error_40 == Last_SQL_Error_41 == error_message:
			break
		else:
			time.sleep(1)

	master_status_40 = get_master_status(conn40)
	File_40,Position_40 = master_status_40['File'],master_status_40['Position']

	change_string = """
	change master to 
	master_host='10.0.1.40',
	master_port=3306,
	master_user='repl',
	master_password='repl',
	master_log_file='%s',
	master_log_pos=%d;
	""" % (File_40,Position_40)

	change_master(conn39,change_string)
	change_master(conn41,change_string)
	repair_slave(conn40)


# result = get_slave_status(host='localhost', port=3306, user='root',passwd='mysql',charset='utf8')

"""
stop slave;

change master to 
master_host='172.16.65.36',
master_port=3306,
master_user='repl',
master_password='repl',
master_log_file='mysql-bin.000042',
master_log_pos=112269937;

start slave;
"""

# conn=pymysql.connect(host='localhost', port=3306, user='root',passwd='mysql',db='performance_schema',charset='utf8')
# cursor = conn.cursor(pymysql.cursors.DictCursor)
# cursor.execute("show slave status;")
# result = cursor.fetchone()
# if result['Last_SQL_Error'] == error_message:


# "select column_name, ORDINAL_POSITION from information_schema.columns where table_schema='%s' and table_name='%s' and IS_NULLABLE='NO';" % (db, tb_name)



# def get_conn(db_host,db_port,db_user,db_password):
#     return pymysql.connect(host=db_host, port=int(db_port), user=db_user,passwd=db_password)

# conn = get_conn(localhost,3306,root,mysql)
# cursor = conn.cursor()
# cursor.execute("select concat_ws(',',host,port) from performance_schema.replication_connection_configuration")
# r = cursor.fetchone()
# print(r)


# conn=pymysql.connect(host='localhost', port=3306, user='root',passwd='mysql',db='performance_schema',charset='utf8')
# cursor = conn.cursor()
# cursor.execute("select concat_ws(',',host,port) from replication_connection_configuration")
# host,port=cursor.fetchone()[0].split(',')

